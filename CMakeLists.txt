cmake_minimum_required(VERSION 3.18.3)
project(FreeRTOS VERSION 0.1.0)

set(PROJ "FreeRTOS")
project(${PROJ})

set(LINKER_OPTION "-T")
set(LINKER_SCRIPT_SUFFIX ".ld")
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

### Require out-of-source builds
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please make a build subdirectory. Feel free to remove CMakeCache.txt and CMakeFiles.")
endif()

find_package(Git QUIET)

if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    RESULT_VARIABLE GIT_SUBMOD_RESULT)
    if(NOT GIT_SUBMOD_RESULT EQUAL "0")
        message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
    endif()
endif()


# All relative to project root, as generated by STM32CubeMX.
set(SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
set(INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include)
set(FreeRTOS_SOURCE_DIR ${CMAKE_SOURCE_DIR}/FreeRTOS/Source)
set(FreeRTOS_PORTABLE_DIR ${CMAKE_SOURCE_DIR}/FreeRTOS/Source/portable)
set(FreeRTOS_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/FreeRTOS/Source/include)

# Look here for header files.
include_directories(INCLUDE_DIR)
include_directories(${PORTABLE_DIR}/GCC/ARM_CM4F)
link_directories(${SOURCE_DIR})

# Get all sources
AUX_SOURCE_DIRECTORY(${FreeRTOS_SOURCE_DIR} SOURCES)
AUX_SOURCE_DIRECTORY(${FreeRTOS_INCLUDE_DIR} FreeRTOS_INCLUDES)
AUX_SOURCE_DIRECTORY(${INCLUDE_DIR} INCLUDES)

add_library(library ${SOURCE_DIR}/main.cpp ${INCLUDE_DIR})
target_include_directories(library PUBLIC ../include)

add_executable(${PROJ}
    # ${FreeRTOS_PORTABLE_DIR}/GCC/ARM_CM4F/port.c
    # ${FreeRTOS_PORTABLE_DIR}/MemMang/heap_4.c
    # ${FreeRTOS_SOURCE_DIR}/croutine.c
    # ${FreeRTOS_SOURCE_DIR}/event_groups.c
    # ${FreeRTOS_SOURCE_DIR}/list.c
    # ${FreeRTOS_SOURCE_DIR}/queue.c
    # ${FreeRTOS_SOURCE_DIR}/stream_buffer.c
    # ${FreeRTOS_SOURCE_DIR}/tasks.c
    # ${FreeRTOS_SOURCE_DIR}/timers.c
    ${SOURCE_DIR}/main.cpp
    startup_stm32f446xx.s
    ${CMAKE_MODULE_PATH}
    ${INCLUDES}
    ${SOURCES}
)

target_compile_definitions(${PROJ} PUBLIC
    # "__weak=__attribute__((weak))"
    # "__packed=__attribute__((__packed__))"
    USE_HAL_DRIVER
    STM32F446xx
)

target_compile_options(${PROJ} PUBLIC
    $<$<COMPILE_LANGUAGE:CXX>:
        -std=c++14
    >
    -mthumb
    -mcpu=cortex-m4
    -mno-thumb-interwork
    -mfpu=vfp
    -msoft-float
    -Wall
    -ffunction-sections
    -fdata-sections
    -O0
)

set_target_properties(${PROJ} PROPERTIES SUFFIX ".elf")

set(LINKER_SCRIPT ${CMAKE_CURRENT_LIST_DIR}/STM32F446RETx_FLASH${LINKER_SCRIPT_SUFFIX})

target_link_options(${PROJ} PUBLIC
    ${LINKER_OPTION} ${LINKER_SCRIPT}
    -specs=nano.specs
    -Wl,--gc-section
    -mcpu=cortex-m4
    -mthumb
)